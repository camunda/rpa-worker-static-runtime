import java.nio.file.Files

tasks.register("createPythonEnvironment", Exec) {
	outputs.dir(project.layout.buildDirectory.dir("venv"))

	workingDir project.layout.buildDirectory
	commandLine 'python3', '-m', 'venv', 'venv'
}

String binDir = project.hasProperty("nativePlatform") && project.property("nativePlatform") == "win32"
		? "Scripts"
		: "bin"
String exeSuffix = project.hasProperty("nativePlatform") && project.property("nativePlatform") == "win32"
		? ".exe"
		: ""

tasks.register("installPipDependencies", Exec) {
	dependsOn(project(":rpa-worker-python-requirements").tasks.named("processResources"))
	dependsOn(createPythonEnvironment)
	
	workingDir project.layout.buildDirectory
	commandLine project.layout.buildDirectory.file("venv/${binDir}/pip${exeSuffix}").get(), 
			'install', 
			'-r', project(":rpa-worker-python-requirements").tasks.named("prepareRequirementsFile").get().outputs.files.singleFile
}

tasks.register("buildRuntime", Exec) {
	dependsOn installPipDependencies

	workingDir project.layout.buildDirectory
	
	List<?> cmd = [
			project.layout.buildDirectory.file("venv/${binDir}/pyinstaller${exeSuffix}").get(),
			"-D",
			"-n", "robot",
			"--collect-data", "robot",
			"--distpath", "dist"
	]
	
	["robot", "robot.libraries", "Camunda", "Camunda.Browser", "Camunda.Excel"].each {
		cmd << "--collect-submodules"
		cmd << it
	}
	
	[
			"Camunda.Archive",
			"Camunda.Browser.Selenium",
			"Camunda.Calendar",
			"Camunda.Desktop",
			"Camunda.Desktop.OperatingSystem",
			"Camunda.Excel.Application",
			"Camunda.Excel.Files",
			"Camunda.FileSystem",
			"Camunda.FTP",
			"Camunda.HTTP",
			"Camunda.Images",
			"Camunda.JavaAccessBridge",
			"Camunda.JSON",
			"Camunda.MFA",
			"Camunda.MSGraph",
			"Camunda.Outlook.Application",
			"Camunda.PDF",
			"Camunda.SAP",
			"Camunda.Tables",
			"Camunda.Tasks",
			"Camunda.Windows",
			"Camunda.Word.Application",
	].each {
		cmd << "--hidden-import"
		cmd << it
	}
	
	cmd << file("src/robot_runner.py")
	
	commandLine(cmd)
}

tasks.register("fixDistDirName") {
	buildRuntime.finalizedBy(it)
	
	doLast {
		java.nio.file.Path oldName = project.layout.buildDirectory.file("dist/robot").get().asFile.toPath()
		java.nio.file.Path newName = oldName.resolveSibling("runtime")
		Files.move(oldName, newName)
	}
}




tasks.register("testRuntime", Exec) {
	dependsOn buildRuntime
	dependsOn fixDistDirName

	workingDir project.layout.projectDirectory
	commandLine project.layout.buildDirectory.file('dist/runtime/robot').get(), '--dryrun', 'test.robot'
}

check.dependsOn(testRuntime)

tasks.register("zipRuntime", Zip) {
	dependsOn testRuntime
	
	archiveFileName = "runtime.zip"
	from project.layout.buildDirectory.file('dist/')
}
sourceSets.main.resources.srcDir(project.layout.buildDirectory.dir("distributions"))
processResources.dependsOn(zipRuntime)

jar {
	if (project.hasProperty("nativePlatform"))
		archiveClassifier = "${project.properties.nativePlatform}"
	if (project.hasProperty("nativeArch"))
		archiveClassifier = "${archiveClassifier.get()}_${project.properties.nativeArch}"
}

publishing {
	publications {
		maven(MavenPublication) {
			artifact(project.layout.buildDirectory.file("libs/rpa-worker-static-runtime-${project.version}-linux_amd64.jar")) {
				classifier "linux_amd64"
				extension "jar"
			}
			artifact(project.layout.buildDirectory.file("libs/rpa-worker-static-runtime-${project.version}-linux_aarch64.jar")) {
				classifier "linux_aarch64"
				extension "jar"
			}
			artifact(project.layout.buildDirectory.file("libs/rpa-worker-static-runtime-${project.version}-win32_amd64.jar")) {
				classifier "win32_amd64"
				extension "jar"
			}
			artifact(project.layout.buildDirectory.file("libs/rpa-worker-static-runtime-${project.version}-darwin_amd64.jar")) {
				classifier "darwin_amd64"
				extension "jar"
			}
			artifact(project.layout.buildDirectory.file("libs/rpa-worker-static-runtime-${project.version}-darwin_aarch64.jar")) {
				classifier "darwin_aarch64"
				extension "jar"
			}
		}
	}
}